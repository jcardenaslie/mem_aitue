{'readme': {'experiment_name': 'San Andres Del Valle no_is_minus_actividad', 'experiment_dataset': 'personas_cotizacion7.csv', 'personas_shape': (6183, 42), 'personas_columns': ['Unnamed: 0', 'actividad', 'compra', 'is_apellido1', 'is_apellido2', 'is_celular', 'is_descuento', 'is_direccion', 'is_fnac', 'is_nombre', 'is_nombrecompleto', 'is_nrofam', 'is_presencial', 'is_profesion', 'is_recontacto', 'is_remoto', 'is_telefono', 'loc_comuna', 'loc_provincia', 'loc_region', 'max_rango_edad', 'mean_cot_bod', 'mean_cot_depto', 'mean_cot_esta', 'mean_cot_estu', 'medio_inicial', 'negocio', 'nro_cot_bod', 'nro_cot_depto', 'nro_cot_esta', 'nro_cot_estu', 'nro_proyectos', 'profesion', 'rut', 'sexo', 'tipo_cliente', 'valid_rut', 'Altos del Valle', 'Edificio Urban 1470', 'San Andres Del Valle', 'Edificio Mil610', 'Edificio Junge'], 'personas_after_drop_columns': Index(['loc_comuna', 'loc_provincia', 'loc_region', 'is_descuento',
       'is_presencial', 'mean_cot_bod', 'mean_cot_depto', 'mean_cot_esta',
       'mean_cot_estu', 'is_remoto', 'nro_cot_bod', 'nro_cot_depto',
       'valid_rut', 'nro_cot_esta', 'nro_cot_estu', 'nro_proyectos',
       'is_recontacto', 'sexo', 'tipo_cliente', 'medio_inicial',
       'Altos del Valle', 'Edificio Urban 1470', 'Edificio Mil610',
       'Edificio Junge'],
      dtype='object'), 'personas_predictors_shape': (3816, 24), 'personas_predictors': Index(['loc_comuna', 'loc_provincia', 'loc_region', 'is_descuento',
       'is_presencial', 'mean_cot_bod', 'mean_cot_depto', 'mean_cot_esta',
       'mean_cot_estu', 'is_remoto', 'nro_cot_bod', 'nro_cot_depto',
       'valid_rut', 'nro_cot_esta', 'nro_cot_estu', 'nro_proyectos',
       'is_recontacto', 'sexo', 'tipo_cliente', 'medio_inicial',
       'Altos del Valle', 'Edificio Urban 1470', 'Edificio Mil610',
       'Edificio Junge'],
      dtype='object'), 'personas_dummies_shape': (3816, 50), 'personas_negocio': (837,), 'personas_nonegocio': (2979,), 'x_train_shape': (2671, 50), 'y_train_shape': (2671,), 'x_test_shape': (1145, 50), 'y_test_shape': (1145,), 'model': {'PRT_BLR': {'conf_matrix': array([[708, 181],
       [ 80, 176]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       0.90      0.80      0.84       889\n       True       0.49      0.69      0.57       256\n\navg / total       0.81      0.77      0.78      1145\n'}, 'KNN': {'best_score': 0.8034591194968553, 'name': 'KNN', 'best_estimator': KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=6, p=2,
           weights='uniform'), 'conf_matrix': array([[733, 156],
       [ 94, 162]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       0.89      0.82      0.85       889\n       True       0.51      0.63      0.56       256\n\navg / total       0.80      0.78      0.79      1145\n'}, 'PCAKNN': {'best_score': 0.8349056603773585, 'name': 'PCAKNN', 'best_estimator': LogisticRegression(C=0.4393970560760795, class_weight=None, dual=False,
          fit_intercept=True, intercept_scaling=1, max_iter=100,
          multi_class='ovr', n_jobs=1, penalty='l1', random_state=None,
          solver='liblinear', tol=0.0001, verbose=0, warm_start=False), 'conf_matrix': array([[  1, 888],
       [  0, 256]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       1.00      0.00      0.00       889\n       True       0.22      1.00      0.37       256\n\navg / total       0.83      0.22      0.08      1145\n'}, 'ULR': {'conf_matrix': array([[846,  43],
       [162,  94]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       0.84      0.95      0.89       889\n       True       0.69      0.37      0.48       256\n\navg / total       0.81      0.82      0.80      1145\n'}, 'BLR': {'conf_matrix': array([[701, 188],
       [ 83, 173]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       0.89      0.79      0.84       889\n       True       0.48      0.68      0.56       256\n\navg / total       0.80      0.76      0.78      1145\n'}, 'UDT': {'best_score': 0.8359538784067087, 'name': 'UDT', 'best_estimator': DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=6,
            max_features=15, max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=4, min_samples_split=2,
            min_weight_fraction_leaf=0.0, presort=False, random_state=None,
            splitter='best'), 'conf_matrix': array([[831,  58],
       [139, 117]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       0.86      0.93      0.89       889\n       True       0.67      0.46      0.54       256\n\navg / total       0.81      0.83      0.82      1145\n'}, 'URF': {'best_score': 0.835691823899371, 'name': 'URF', 'best_estimator': RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',
            max_depth=7, max_features=19, max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=4, min_samples_split=2,
            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,
            oob_score=False, random_state=None, verbose=0,
            warm_start=False), 'conf_matrix': array([[857,  32],
       [141, 115]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       0.86      0.96      0.91       889\n       True       0.78      0.45      0.57       256\n\navg / total       0.84      0.85      0.83      1145\n'}, 'BRF': {'conf_matrix': array([[701, 188],
       [ 83, 173]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       0.89      0.79      0.84       889\n       True       0.48      0.68      0.56       256\n\navg / total       0.80      0.76      0.78      1145\n'}, 'SVM': {'best_score': 0.7672955974842768, 'name': 'SVM', 'best_estimator': SVC(C=1, cache_size=200, class_weight='balanced', coef0=0.0,
  decision_function_shape='ovr', degree=3, gamma=0.001, kernel='rbf',
  max_iter=-1, probability=True, random_state=None, shrinking=True,
  tol=0.001, verbose=False), 'conf_matrix': array([[719, 170],
       [111, 145]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       0.87      0.81      0.84       889\n       True       0.46      0.57      0.51       256\n\navg / total       0.78      0.75      0.76      1145\n'}, 'XGB': {'best_score': 0.8375140396855111, 'name': 'XGB', 'best_estimator': XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,
       max_depth=6, min_child_weight=1, missing=None, n_estimators=50,
       n_jobs=1, nthread=None, objective='binary:logistic', random_state=0,
       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
       silent=True, subsample=1), 'conf_matrix': array([[818,  71],
       [151, 105]], dtype=int64), 'cla_report': '             precision    recall  f1-score   support\n\n      False       0.84      0.92      0.88       889\n       True       0.60      0.41      0.49       256\n\navg / total       0.79      0.81      0.79      1145\n'}}, 'time_exec': 500.51524233818054}}